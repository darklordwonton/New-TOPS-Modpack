# Configuration file

main {
    # Draws random stuffs on the screen! And maybe does some other things. [default: false]
    B:"Debug Mode"=false

    client {
        # Replace vanilla heart rendering. [default: false]
        B:"Custom Heart Rendering"=false

        # The colors for each additional row of hearts. The colors will loop back around to the beginning if necessary. Use hexadecimal to specify colors (like HTML color codes). [default: [bf0000], [e66000], [e69900], [e6d300], [99e600], [4ce600], [e699], [e6e6], [99e6], [e6], [9900e6], [d580ff], [8c8c8c], [e6e6e6]]
        S:"Heart Colors" <
            bf0000
            e66000
            e69900
            e6d300
            99e600
            4ce600
            e699
            e6e6
            99e6
            e6
            9900e6
            d580ff
            8c8c8c
            e6e6e6
         >
    }

    player {

        health {
            # If true, the player's health will be reset to the default starting health on death. [default: false]
            B:"Lose Health On Death"=false

            # The maximum amount of health (in half hearts) the player can reach. Zero means unlimited. [range: 0 ~ 2147483647, default: 100]
            I:"Max Health"=100

            # The amount of health (in half hearts) the player starts with. [range: 2 ~ 2147483647, default: 20]
            I:"Starting Health"=20
        }

        regen {
            # The number of ticks between each bonus regen tick (a half heart being healed). [range: 0 ~ 2147483647, default: 100]
            I:Delay=100

            # The number of ticks after being hurt before bonus regen activates. [range: 0 ~ 2147483647, default: 400]
            I:"Delay (Initial)"=400

            # Bonus health regen will be enabled. Vanilla regen is not changed in any way, this just adds extra healing! [default: true]
            B:"Enable Bonus Regen"=true

            # The maximum food level at which bonus regen will be active. [range: 0 ~ 20, default: 20]
            I:"Food Max"=20

            # The minimum food level at which bonus regen will be active. [range: 0 ~ 20, default: 10]
            I:"Food Min"=10
        }

    }

    mob {

        health {
            # Allow hostile mobs (monsters) to spawn with extra health based on difficulty. [default: true]
            B:"Allow Hostile Extra Health"=true

            # Allow peaceful mobs (such as animals) to spawn with extra health based on difficulty. [default: true]
            B:"Allow Peaceful Extra Health"=true

            # The minimum extra health a mob will have per point of difficulty. For example, at difficulty 30, a mob that normally has 20 health would have at least 50 health. [range: 0.0 ~ 3.4028235E38, default: 0.5]
            S:"Base Health Modifier"=0.5

            # The minimum extra health a peaceful will have per point of difficulty. Same as "Base Health Modifier", but for peaceful mobs! [range: 0.0 ~ 3.4028235E38, default: 0.25]
            S:"Base Health Modifier Peaceful"=0.25

            # Mobs listed here will never receive extra health, and will not become blights. There is also a separate blacklist for blights, if you still want the mob in question to have extra health. [default: ]
            S:Blacklist <
             >

            # Describes how extra mob health is applied. This will not change the health of mobs that already exist!
            #   ADD - Adds a value based on difficulty to the mob's health, ignoring the mob's default health.
            #   MULTI - Multiplies the mob's health instead of adding a flat value. For example, endermen
            #     will always have around twice the health of zombies with this option.
            #   MULTI_HALF - Multiplies the mob's health, but the value is reduced for higher-health mobs.
            #   MULTI_QUARTER - Same as MULTI_HALF, but the scaling factor is even less. [default: MULTI]
            S:"Scaling Mode"=MULTI
        }

        blights {
            # The amplifier level on the speed potion effect applied to blights. [range: 0 ~ 99, default: 8]
            I:"Amplifier Speed"=8

            # The amplifier level on the strength potion effect applied to blights. [range: 0 ~ 99, default: 2]
            I:"Amplifier Strength"=2

            # Mobs listed here will never become blights, but can still receive extra health. There is also a blacklist for extra health. [default: [WitherBoss]]
            S:Blacklist <
                WitherBoss
             >

            # Determines the chance of a mob spawning as a blight. Formula is blightChanceMulti * currentDifficulty / maxDifficulty [range: 0.0 ~ 3.4028235E38, default: 0.0625]
            S:"Blight Chance Multiplier"=0.0625
        }

    }

    items {
        # The chance of any mob dropping a heart canister when killed. [range: 0.0 ~ 1.0, default: 0.0]
        S:"Heart Drop Chance"=0

        # The maximum number of heart canisters that a blight will drop when killed. [range: 0 ~ 64, default: 2]
        I:"Hearts Dropped by Blight Max"=2

        # The minimum number of heart canisters that a blight will drop when killed. [range: 0 ~ 64, default: 1]
        I:"Hearts Dropped by Blight Min"=1

        # The maximum number of heart canisters that a boss will drop when killed. [range: 0 ~ 64, default: 1]
        I:"Hearts Dropped by Boss Max"=1

        # The minimum number of heart canisters that a boss will drop when killed. [range: 0 ~ 64, default: 1]
        I:"Hearts Dropped by Boss Min"=1
    }

    difficulty {
        # Defines how the area difficulty is determined when spawning a mob.
        #   AVERAGE - The average difficulty level of all nearby players.
        #   WEIGHTED_AVERAGE - Similar to average, but closer players have a greater impact on difficulty.
        #   MIN_LEVEL - The lowest difficulty level of all nearby players.
        #   MAX_LEVEL - The highest difficulty level of all nearby players.
        #   DISTANCE_FROM_SPAWN - Based on the mob's distance from spawn.
        #   DISTANCE_FROM_ORIGIN - Based on the mob's distance from the origin. [default: DISTANCE_FROM_SPAWN]
        S:"Area Mode"=DISTANCE_FROM_SPAWN

        # The amount of difficulty added per unit distance from the origin/spanw, assuming "Area Mode" is set to a distance-based option. [range: 0.0 ~ 3.4028235E38, default: 0.4]
        S:"Difficulty Per Block"=0.1

        # Adds this much extra difficulty per additional player in the area. So, area difficulty will be multiplied by: 1 + group_bonus * (players_in_area - 1) [range: 0.0 ~ 3.4028235E38, default: 0.4]
        S:"Group Area Bonus"=0.1

        # Difficulty added per second is multiplied by this if the player is not moving. [range: 0.0 ~ 3.4028235E38, default: 0.7]
        S:"Idle Multiplier"=0.7

        # The amount of difficulty added each second. In Difficult Life, the option was named per tick, but was actually applied each second. [range: 0.0 ~ 3.4028235E38, default: 0.0011574074]
        S:"Increase Per Second"=0.0011574074
        S:"Increase Per Tick"=7.233796E-5

        # The maximum difficult level that can be reached. [range: 0.0 ~ 3.4028235E38, default: 1000.0]
        S:"Max Value"=1000

        # The distance from a newly spawned mob to search for players to determine its difficulty level. Set to 0 for unlimited range. [range: 0 ~ 32767, default: 160]
        I:"Search Radius"=160

        # The starting difficulty level for new worlds. [range: 0.0 ~ 3.4028235E38, default: 0.0]
        S:"Starting Value"=0.0
    }

    network {
        # The number of ticks between update packets. Smaller numbers mean more packets (and more bandwidth and processing power used), but also less client-server desync. [range: 1 ~ 1200, default: 20]
        I:"Packet Delay"=20
    }

    world {

        heart_crystal_ore {
            # The highest y-level the ore can be found at. Must be greater than Min Height [range: 0 ~ 255, default: 35]
            I:"Max Height"=0

            # The lowest y-level the ore can be found at. Must be less than Max Height [range: 0 ~ 255, default: 10]
            I:"Min Height"=0

            # The size of each vein. [range: 0 ~ 10000, default: 0]
            I:"Vein Size"=0

            # The number of veins per chunk. The fractional part is a probability of an extra vein in each chunk. [range: 0.0 ~ 10000.0, default: 0.0]
            S:"Veins Per Chunk"=0
        }

    }

}


